1. Platform: You'll need to decide whether you want to create a web app or a mobile app, or perhaps even both. A web app might be more accessible, as it wouldn't require users to download an app, while a mobile app could provide a smoother experience.

2. User Authentication: You could use a simple user authentication system that requires partygoers to enter a unique party code, which would ensure that only those present at the party can vote. Alternatively, you can use social media login options (e.g., Facebook, Google) to simplify the process.

3. Voting System: Design a simple, intuitive voting system where users can vote to skip the current song. Consider limiting the number of skips per user to prevent misuse of the system. Additionally, you could implement a threshold (e.g., 50% of users) for a song to be skipped.

4. Music Integration: To play music and enable skipping, you'll need to integrate with a music streaming service like Spotify or Apple Music. Familiarize yourself with their APIs and SDKs to understand how you can control playback and access playlists.

5. Playlist Management: Allow the host to create and manage playlists for the party. Consider adding features like collaborative playlists, where partygoers can add songs to the queue.

6. Real-time Updates: The web interface should update in real-time as users vote and the song changes. You can achieve this using technologies like WebSockets or long-polling.

7. Design and User Experience (UX): Create an aesthetically pleasing and easy-to-use interface that encourages users to participate in the voting process.

8. Analytics: Consider implementing an analytics system to track user engagement, the most skipped songs, and other useful metrics. This data can help you improve the system and provide valuable insights for future events.

9. Hosting and Scalability: Choose a hosting service that can handle a varying number of users and ensure that the system can scale as needed, especially if the app becomes popular.

10. Testing and Feedback: Test the web interface thoroughly and gather feedback from users to refine the experience and fix any issues that may arise.
